import os
from cgtscons import *

# clone to avoid modifying parent enviroment
Import("env",)
env = env.Clone()

# Environments are cloned to contain includes that are only used for that
# compile.  Programs are compiled against public includes.

##
# sonLib
##
slEnv = env.Clone()
slPublicIncludeDirs = ("sonLib/include", "cutest",
                       "matchingAndOrdering/include", "pinchesAndCacti/include",
                       "threeEdgeConnected/include")
makeIncludesDepends(env, globInclude(env, slPublicIncludeDirs))

slEnv.Append(CPPPATH=("lz4", "quicktree/include") + (outputIncludeDir(env),))
quicktreeSrcs = [os.path.join("quicktree/src", f) for f in 
                 ("align.c", "cluster.c", "distancemat.c",
                  "distancemat_merops.c", "options.c", "sequence.c",
                  "tree.c", "buildtree.c", "util.c")]
lz4Srcs = ["lz4/lz4.c", "lz4/lz4hc.c"]
threeEdgeSrcs = ["threeEdgeConnected/src/3_Absorb3edge2x.c"]
matchOrderSrcs = Glob("matchingAndOrdering/src/*.c")
pinchesSrcs = Glob("pinchesAndCacti/src/*.c")
sonLibSrcs = Glob("sonLib/src/*.c") + Glob("sonLib/src/*.cpp")
buildStaticLibrary(slEnv, SONLIB_LIB_NAME,
                   sonLibSrcs + quicktreeSrcs + lz4Srcs + threeEdgeSrcs + matchOrderSrcs + pinchesSrcs)

##
# cutest
##
cutestSrcs = ["cutest/CuTest.c", "cutest/CuTestTest.c"]
buildStaticLibrary(slEnv, CUTEST_LIB_NAME, cutestSrcs)

##
# sonLib tests
##
slTestEnv = slEnv.Clone()
libAddSonLib(slTestEnv)
libAddCuTest(slTestEnv)
libAddKyotoDatabase(slTestEnv)

# these are compiled separately, exclude from glob of unit tests
# FIXME: would it be better to 
nonUnitTests = ("kt_connect_test.cpp", "cigarsTest.c", "fastaCTest.c",
                "kvDatabaseTest.c", "kvDatabaseTestCommon.c")
testSrcDir = "sonLib/tests"
linkTestProg(slTestEnv, "sonLib_Tests",
             globSrcPaths(slTestEnv, testSrcDir, "*.c", excludes=nonUnitTests))
linkTestProg(slTestEnv, "sonLib_cigarsTest",
             getSrcPaths(testSrcDir, ["cigarsTest.c"]))
linkTestProg(slTestEnv, "sonLib_fastaCTest",
             getSrcPaths(testSrcDir, ["fastaCTest.c"]))
linkTestProg(slTestEnv, "threeEdgeConnectedTests",
             globSrcPaths(slTestEnv, "threeEdgeConnected/tests", "*.c"))

# need special flags for anything including kyoto typhoon, etc headers
slKtTestEnv = slTestEnv.Clone()
slKtTestEnv.Append(CXXFLAGS=["-fpermissive", "-Wno-overflow", "-Wno-unused-but-set-variable",
                             "-Wno-conversion-null", "-Wno-narrowing"])
linkTestProg(slKtTestEnv, "sonLib_kt_connect_test",
             getSrcPaths(testSrcDir, ["kt_connect_test.cpp"]))
linkTestProg(slKtTestEnv, "sonLib_kvDatabaseTest",
             getSrcPaths(testSrcDir, ["kvDatabaseTest.c", "kvDatabaseTestCommon.c"]))

##
# blossom5 program
##
blEnv = env.Clone()
blEnv.Append(CXXFLAGS=["-fpermissive"])
linkProg(env, "blossum5",
         Glob("blossom/*.cpp") + Glob("blossom/GEOM/*.cpp") + Glob("blossom/MinCost/*.cpp"))


###
# python code
###
#envRelSymlink(env, "#/mods/sonLib/py/cgt/sonLib", "./lib/py/cgt/sonLib")
# FIXME: env.SymLink("./lib/py/cgt/sonLib", "#/mods/sonLib/py/cgt/sonLib")
